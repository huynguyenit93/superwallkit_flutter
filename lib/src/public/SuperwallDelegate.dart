import 'package:superwallkit_flutter/src/public/PaywallInfo.dart';
import 'package:superwallkit_flutter/src/public/SubscriptionStatus.dart';
import 'package:superwallkit_flutter/superwallkit_flutter.dart';

/// The delegate protocol that handles Superwall lifecycle events.
///
/// The delegate methods receive callbacks from the SDK in response to certain placements.
///
/// You set this directly using ``Superwall/delegate``.
///
/// To learn how to conform to the delegate in your app and best practices, see
/// [our docs](https://docs.superwall.com/docs/3rd-party-analytics).
abstract class SuperwallDelegate {
  /// Called when the property `subscriptionStatus` of `Superwall` changes.
  void subscriptionStatusDidChange(SubscriptionStatus newValue);

  /// Called whenever an internal analytics placement is tracked.
  void handleSuperwallEvent(SuperwallEventInfo eventInfo);

  /// Called when the user taps an element on your paywall with a custom action.
  void handleCustomPaywallAction(String name);

  /// Called right before the paywall is dismissed.
  void willDismissPaywall(PaywallInfo paywallInfo);

  /// Called right before the paywall is presented.
  void willPresentPaywall(PaywallInfo paywallInfo);

  /// Called right after the paywall is dismissed.
  void didDismissPaywall(PaywallInfo paywallInfo);

  /// Called right after the paywall is presented.
  void didPresentPaywall(PaywallInfo paywallInfo);

  /// Called when the user opens a URL with a specific tag on your paywall.
  void paywallWillOpenURL(Uri url);

  /// Called when the user taps a deep link in your paywall.
  void paywallWillOpenDeepLink(Uri url);

  /// Receive all log messages generated by the SDK.
  void handleLog(String level, String scope, String? message,
      Map<dynamic, dynamic>? info, String? error);
}
